package kr.co.rmadmsjm.jc11_statehoisting

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import kr.co.rmadmsjm.jc11_statehoisting.ui.theme.JC11_StateHoistingTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            JC11_StateHoistingTheme {
                Scaffold( modifier = Modifier.fillMaxSize() ) { innerPadding ->
                    PyeongToSquareMeter(
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}

@Composable
fun PyeongToSquareMeter(modifier: Modifier = Modifier) {
    var pyeong by rememberSaveable {
        mutableStateOf("23")
    }
    var squaremeter by rememberSaveable {
        mutableStateOf((23 * 3.306).toString())
    }

    // 1. rememberÎ•º Ïù¥Ïö©Ìï¥ ÏÉÅÌÉúÎ•º ÎßåÎì§Í≥† Ìèâ Í∞íÏùÑ ÏûÖÎ†•ÌïòÎ©¥ Ï†úÍ≥±ÎØ∏ÌÑ∞Í∞Ä Ï∂úÎ†•ÎêòÎèÑÎ°ù ÌôîÎ©¥ Íµ¨ÏÑ±
    // ÌèâÏùÑ Ï†úÍ≥±ÎØ∏ÌÑ∞Î°ú Î∞îÍæ∏Í∏∞ ÏúÑÌï¥ÏÑúÎäî 3.306 Í≥±ÌïòÍ∏∞

    // Ï¢ãÏßÄ Î™ª Ìïú Î∞©Î≤ï
    // ÏÉÅÌÉúÍ∞Ä Ï†ÑÎã¨ÎêòÎäî Î≤îÏúÑÎ•º Í∞ÄÎä•Ìïú Ï¢ÅÌòÄÏïº Ìï®
    // ÏÉÅÌÉúÍ∞Ä Ï†ÑÎã¨ÎêòÎäî Î≤îÏúÑÎ•º Ï¢ÅÌûàÍ∏∞ ÏúÑÌï¥ ÏÉÅÌÉúÎ•º ÏúóÎã®ÏúºÎ°ú ÎÅåÏñ¥Ïò¨Î¶¨Îäî Í≤É: State Hoisting
    /*
    Column(modifier = modifier.padding(16.dp)) {
        OutlinedTextField(
            value = pyeong,
            onValueChange = {
                if (it.isBlank()) {
                    pyeong = ""
                    squaremeter = ""
                    return@OutlinedTextField
                }
                val numericValue = it.toFloatOrNull() ?: return@OutlinedTextField
                pyeong = it
                squaremeter = (numericValue * 3.306).toString()
            },
            label = {
                Text("Ìèâ")
            }
        )
        OutlinedTextField(
            value = squaremeter,
            onValueChange = {},
            label = {
                Text("Ï†úÍ≥±ÎØ∏ÌÑ∞")
            }
        )
    }
     */

    // 2. `Composable` Ìï®ÏàòÎ•º ÎßåÎì§Í≥† `Column`Ïùò Ìï≠Î™©ÏùÑ ÏòÆÍ∏∞Í∏∞
    // Îã® ÏÉÅÌÉúÎäî ÏòÆÍ∏∞ÏßÄ ÏïäÍ∏∞

    // ÌååÎùºÎØ∏ÌÑ∞Îäî ÏïÑÎûòÏôÄ Í∞ôÏù¥ Íµ¨ÏÑ±
    // `pyeong: String, squareMeter: String, onPyeongChange: (String) -> Unit`

    // UIÎäî UIÎßå Îã§Î£®Í≥† ÏûàÍ≥†, ÏÉÅÌÉúÎ•º Îã§Î£®Îäî Í≤ÉÏùÄ ÏÉùÌÉúÎßå Îã§Î£®Í≥† ÏûàÏùå
    // üí° UIÏôÄ ÏÉÅÌÉúÎ•º Îã§Î£®Îäî Í≤ÉÏù¥ Î∂ÑÎ¶¨Îê®
    PyeongToSquareMeterStateless(
        pyeong = pyeong,
        squaremeter = squaremeter
    ) {
        if (it.isBlank()) {
            pyeong = ""
            squaremeter = ""
            return@PyeongToSquareMeterStateless
        }
        val numericValue = it.toFloatOrNull() ?: return@PyeongToSquareMeterStateless
        pyeong = it
        squaremeter = (numericValue * 3.306).toString()
    }
}

@Composable
fun PyeongToSquareMeterStateless(
    pyeong: String,
    squaremeter: String,
    onPyeongchange: (String) -> Unit
) {
    Column(modifier = Modifier.padding(16.dp)) {
        OutlinedTextField(
            value = pyeong,
            onValueChange = onPyeongchange,
            label = {
                Text("Ìèâ")
            }
        )
        OutlinedTextField(
            value = squaremeter,
            onValueChange = onPyeongchange,
            label = {
                Text("Ï†úÍ≥±ÎØ∏ÌÑ∞")
            }
        )
    }
}

@Preview(showSystemUi = true)
@Composable
fun DefaultPreview() {
    JC11_StateHoistingTheme {
        PyeongToSquareMeter()
    }
}